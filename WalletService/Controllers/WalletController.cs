using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Shared;
using WalletService.Repositories;

namespace WalletService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class WalletController : ControllerBase
    {
        private readonly ILogger<WalletController> _logger;
        private readonly InstanceMetaData _instanceMetaData;
        private readonly IWalletRepository _walletRepository;

        public WalletController(ILogger<WalletController> logger, InstanceMetaData instanceMetaData, IWalletRepository walletRepository)
        {
            _logger = logger;
            _instanceMetaData = instanceMetaData;
            _walletRepository = walletRepository;
        }

        [HttpGet("ping")]
        public IActionResult Ping()
        {
            _logger.LogInformation("Ping received by instance {InstanceId}", _instanceMetaData.Id);
            return Ok("WalletService is running");
        }

        [HttpGet("secureping")]
        [Authorize(Roles = "admin,dev")]
        public IActionResult SecurePing()
        {
            _logger.LogInformation("Secure ping received by instance {InstanceId}", _instanceMetaData.Id);
            return Ok("WalletService is running securely");
        }

        [HttpGet("{userId}/balance")]
        public async Task<ActionResult<int>> GetBalance(Guid userId)
        {
            _logger.LogInformation("Getting balance for user {UserId} on instance {InstanceId}", userId, _instanceMetaData.Id);
            return await _walletRepository.GetBalanceAsync(userId);
        }

        [HttpPost]
        public async Task<IActionResult> CreateWallet([FromBody] CreateWalletRequest request)
        {
            // 1. Create wallet with the pre-defined ID
            var wallet = new Wallet
            {
                Id = request.WalletId, // Use the ID generated by UserService
                UserId = request.UserId,
                Balance = 0
            };

            await _walletRepository.AddAsync(wallet);
            return Created();
        }

        public record CreateWalletRequest(Guid WalletId, Guid UserId);
    }
}
